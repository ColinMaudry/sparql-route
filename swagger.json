{
    "swagger": "2.0",
    "info": {
        "title": "SPARQL router API",
        "description": "SPARQL router serves SPARQL query results for developpers and data fanatics who don't know the SPARQL language.\n\n\nSee more on the [README](https://github.com/ColinMaudry/sparql-router).\n",
        "version": "0.1.0"
    },
    "host": "secure-chamber-54895.herokuapp.com",
    "schemes": [
        "https"
    ],
    "basePath": "/",
    "produces": [
        "application/sparql-results+json",
        "application/sparql-results+xml",
        "text/csv",
        "application/rdf+xml",
        "text/turtle",
        "application/ld+json",
        "application/n-triples"
    ],
    "paths": {
        "/tables/{name}{extension}": {
            "get": {
                "summary": "Query that returns tabular data. The extension determines the requested format.",
                "description": "The queries in `/tables` return tabular data, that is data in columns, with column headers. These results are typically returned as JSON, CSV or XML, **depending on the extension**.\n\nExample: `/tables/test.csv`.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the query to trigger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "extension",
                        "in": "path",
                        "description": "A valid extension to determine the format of the results. See [the supported extensions](https://github.com/ColinMaudry/sparql-router/blob/master/config/default.json).",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the SPARQL query.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Extension not valid."
                    },
                    "404": {
                        "description": "The query doesn't exist."
                    }
                }
            }
        },
        "/tables/{name}": {
            "get": {
                "summary": "Query that returns tabular data. The `Accept` header determines the requested format.",
                "description": "The queries in `/tables` return tabular data, that is data in columns, with column headers. These results are typically returned as JSON, CSV or XML, **depending on the value of the `Accept` header**.\n\nIf `Accept` is empty or contains an unknown value, the default format is returned.\n\n\nExample: `/tables/test` and `Accept: text/csv`\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the query to trigger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Accept",
                        "description": "One of the [supported content-types](https://github.com/ColinMaudry/sparql-router/blob/master/config/default.json).\n",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the SPARQL query.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "The query doesn't exist."
                    }
                }
            }
        },
        "/graphs/{name}{extension}": {
            "get": {
                "summary": "Query that returns graph data. The extension determines the requested format.",
                "description": "The queries in `/graphs` return graph data, or [RDF triples](https://www.w3.org/TR/rdf11-primer/#section-data-model), in the form of `subject predicate object` statements. These results are typically returned as [Turtle](https://www.w3.org/TeamSubmission/turtle/#sec-examples),  [JSON-LD](http://json-ld.org/) or [RDF/XML](https://www.w3.org/TR/rdf-syntax-grammar/#section-Syntax), **depending on the extension**.\n\nExample: `/graphs/test.ttl`.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the query to trigger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "extension",
                        "in": "path",
                        "description": "A valid extension to determine the format of the results. See [the supported extensions](https://github.com/ColinMaudry/sparql-router/blob/master/config/default.json).",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the SPARQL query.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Extension not valid."
                    },
                    "404": {
                        "description": "The query doesn't exist."
                    }
                }
            }
        },
        "/graphs/{name}": {
            "get": {
                "summary": "Query that returns graph data. The `Accept` header determines the requested format.",
                "description": "The queries in `/graphs` return graph data, or [RDF triples](https://www.w3.org/TR/rdf11-primer/#section-data-model), in the form of `subject predicate object` statements. These results are typically returned as [Turtle](https://www.w3.org/TeamSubmission/turtle/#sec-examples),  [JSON-LD](http://json-ld.org/) or [RDF/XML](https://www.w3.org/TR/rdf-syntax-grammar/#section-Syntax), **depending on the value of the `Accept` header**.\n\nIf `Accept` is empty or contains an unknown value, the default format is returned.\n\nExample: `/graphs/test` and `Accept: text/turtle`\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the query to trigger.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Accept",
                        "description": "One of the [supported content-types](https://github.com/ColinMaudry/sparql-router/blob/master/config/default.json).\n",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the SPARQL query.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "The query doesn't exist."
                    }
                }
            }
        },
        "/estimates/time": {
            "get": {
                "summary": "Time Estimates",
                "description": "The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.",
                "parameters": [
                    {
                        "name": "start_latitude",
                        "in": "query",
                        "description": "Latitude component of start location.",
                        "required": true,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "name": "start_longitude",
                        "in": "query",
                        "description": "Longitude component of start location.",
                        "required": true,
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "name": "customer_uuid",
                        "in": "query",
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique customer identifier to be used for experience customization."
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "type": "string",
                        "description": "Unique identifier representing a specific product for a given latitude & longitude."
                    }
                ],
                "tags": [
                    "Estimates"
                ],
                "responses": {
                    "200": {
                        "description": "An array of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Product"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "summary": "User Profile",
                "description": "The User Profile endpoint returns information about the Uber user that has authorized with the application.",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "Profile information for a user",
                        "schema": {
                            "$ref": "#/definitions/Profile"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/history": {
            "get": {
                "summary": "User Activity",
                "description": "The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.",
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "format": "int32",
                        "description": "Offset the list of returned results by this amount. Default is zero."
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of items to retrieve. Default is 5, maximum is 100."
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "History information for the given user",
                        "schema": {
                            "$ref": "#/definitions/Activities"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Product": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string",
                    "description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles."
                },
                "description": {
                    "type": "string",
                    "description": "Description of product."
                },
                "display_name": {
                    "type": "string",
                    "description": "Display name of product."
                },
                "capacity": {
                    "type": "string",
                    "description": "Capacity of product. For example, 4 people."
                },
                "image": {
                    "type": "string",
                    "description": "Image URL representing the product."
                }
            }
        },
        "Profile": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "First name of the Uber user."
                },
                "last_name": {
                    "type": "string",
                    "description": "Last name of the Uber user."
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the Uber user"
                },
                "picture": {
                    "type": "string",
                    "description": "Image URL of the Uber user."
                },
                "promo_code": {
                    "type": "string",
                    "description": "Promo code of the Uber user."
                }
            }
        },
        "Activity": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "Unique identifier for the activity"
                }
            }
        },
        "Activities": {
            "type": "object",
            "properties": {
                "offset": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Position in pagination."
                },
                "limit": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of items to retrieve (100 max)."
                },
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Total number of items available."
                },
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Activity"
                    }
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        }
    }
}